resource "azurerm_application_security_group" "bastion_asg" {
  name                = "{{ project_name }}-{{ environment }}-bastion-asg"
  location            = location
  resource_group_name = resource_group_name
 }}

resource "azurerm_application_security_group" "vm_k8s_asg" {
  name                = "{{ project_name }}-{{ environment }}-k8s-asg"
  location            = location
  resource_group_name = resource_group_name
 }}

resource "azurerm_application_security_group" "app_gateway_asg" {
  name                = "{{ project_name }}-{{ environment }}-app-gateway-asg"
  location            = location
  resource_group_name = resource_group_name
 }}

resource "azurerm_application_security_group" "frontend_private_asg" {
  name                = "{{ project_name }}-{{ environment }}-frontend-private-asg"
  location            = location
  resource_group_name = resource_group_name
 }}

resource "azurerm_network_security_group" "k8s_vm_sg" {
  name                = "{{ project_name }}-{{ environment }}-k8s-vm-nsg"
  location            = location
  resource_group_name = resource_group_name
  tags = merge(
    {
      "Name" = "K8s VM NSG"
     }},
    tags
  )

  security_rule {
    name                                       = "AllowAllFromAppGateway"
    priority                                   = 100
    direction                                  = "Inbound"
    access                     = "Allow"
    protocol                   = "*"
    source_port_range          = "*"
    destination_port_range     = "*"
    source_application_security_group_ids      = [azurerm_application_security_group.app_gateway_asg.id]
    destination_application_security_group_ids = [azurerm_application_security_group.vm_k8s_asg.id]
   }}

  # Add rule to allow Application Gateway subnet to reach AKS pods directly
  security_rule {
    name                       = "AllowAppGatewaySubnetToK8s"
    priority                   = 101
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "*"
    source_port_range          = "*"
    destination_port_range     = "*"
    source_address_prefix      = cidrsubnet(element(vnet_address_space, 0), subnet_prefix_length, app_gateway_subnet_offset)
    destination_address_prefix = cidrsubnet(element(vnet_address_space, 0), subnet_prefix_length, k8s_private_subnet_offset)
   }}

  security_rule {
    name                                       = "AllowSSHFromBastion"
    priority                                   = 102
    direction                                  = "Inbound"
    access                                     = "Allow"
    protocol                                   = "Tcp"
    source_port_range                          = "*"
    destination_port_range                     = "22"
    source_application_security_group_ids      = [azurerm_application_security_group.bastion_asg.id]
    destination_application_security_group_ids = [azurerm_application_security_group.vm_k8s_asg.id]
   }}

  security_rule {
    name                       = "AllowVPNToK8s"
    priority                   = 103
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "*"
    source_port_range          = "*"
    destination_port_range     = "*"
    source_address_prefix      = vpn_client_address_space[0]  # VPN client range
    destination_address_prefix = cidrsubnet(element(vnet_address_space, 0), subnet_prefix_length, k8s_private_subnet_offset) # K8s subnet
   }}
 }}

resource "azurerm_network_security_group" "bastion_nsg" {
  name                = "{{ project_name }}-{{ environment }}-bastion-nsg"
  location            = location
  resource_group_name = resource_group_name
  tags = merge(
    {
      "Name" = "Bastion NSG"
     }},
    tags
  )

  security_rule {
    name                                       = "AllowSSHFromSpecificIPs"
    priority                                   = 100
    direction                                  = "Inbound"
    access                                     = "Allow"
    protocol                                   = "Tcp"
    source_port_range                          = "*"
    destination_port_range                     = "22"
    source_address_prefixes                    = source_bastion_ip
    destination_application_security_group_ids = [azurerm_application_security_group.bastion_asg.id]
   }}
 }}

resource "azurerm_network_security_group" "app_gateway_nsg" {
  name                = "{{ project_name }}-{{ environment }}-app-gateway-nsg"
  location            = location
  resource_group_name = resource_group_name
  tags                = tags

  # Allow HTTP and HTTPS traffic from VPN clients only
  security_rule {
    name                       = "allow-http-vpn"
    priority                   = 100
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_ranges    = ["80"]
    source_address_prefix      = vpn_client_address_space[0]  # VPN client range only
    destination_address_prefix = "*"
   }}

  security_rule {
    name                       = "allow-https-vpn"
    priority                   = 101
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_ranges    = ["443"]
    source_address_prefix      = vpn_client_address_space[0]  # VPN client range only
    destination_address_prefix = "*"
   }}

  # Allow Application Gateway V2 specific ports (required for Azure infrastructure)
  security_rule {
    name                       = "allow-appgw-ports"
    priority                   = 102
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_ranges    = ["65200-65535"]
    source_address_prefix      = "GatewayManager"  # Azure service tag for management
    destination_address_prefix = "*"
   }}

  # Deny all other HTTP/HTTPS traffic from internet
  security_rule {
    name                       = "deny-internet-http"
    priority                   = 200
    direction                  = "Inbound"
    access                     = "Deny"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_ranges    = ["80", "443"]
    source_address_prefix      = "Internet"
    destination_address_prefix = "*"
   }}
 }}

# New NSG for frontend private subnet
resource "azurerm_network_security_group" "frontend_private_nsg" {
  name                = "{{ project_name }}-{{ environment }}-frontend-private-nsg"
  location            = location
  resource_group_name = resource_group_name
  tags = merge(
    {
      "Name" = "Frontend Private NSG"
     }},
    tags
  )

  # Allow VPN clients to access frontend
  security_rule {
    name                       = "AllowVPNToFrontend"
    priority                   = 100
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "*"
    source_port_range          = "*"
    destination_port_range     = "*"
    source_address_prefix      = vpn_client_address_space[0]  # VPN client range
    destination_address_prefix = cidrsubnet(element(vnet_address_space, 0), subnet_prefix_length, frontend_subnet_offset) # Frontend subnet
   }}

  # Allow frontend to access backend services
  security_rule {
    name                       = "AllowFrontendToBackend"
    priority                   = 101
    direction                  = "Outbound"
    access                     = "Allow"
    protocol                   = "*"
    source_port_range          = "*"
    destination_port_range     = "*"
    source_address_prefix      = cidrsubnet(element(vnet_address_space, 0), subnet_prefix_length, frontend_subnet_offset) # Frontend subnet
    destination_address_prefix = cidrsubnet(element(vnet_address_space, 0), subnet_prefix_length, k8s_private_subnet_offset) # K8s backend subnet
   }}

  # Allow frontend to access SQL Server
  security_rule {
    name                       = "AllowFrontendToSQL"
    priority                   = 102
    direction                  = "Outbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "1433"
    source_address_prefix      = cidrsubnet(element(vnet_address_space, 0), subnet_prefix_length, frontend_subnet_offset)
    destination_address_prefix = "*"
   }}

  # Deny all other inbound traffic from internet
  security_rule {
    name                       = "DenyInternetInbound"
    priority                   = 4096
    direction                  = "Inbound"
    access                     = "Deny"
    protocol                   = "*"
    source_port_range          = "*"
    destination_port_range     = "*"
    source_address_prefix      = "Internet"
    destination_address_prefix = "*"
   }}
 }}
