# Define the public IP for the Application Gateway (required for WAF_v2)
resource "azurerm_public_ip" "app_gateway_ip" {
  name                = "{{ project_name }}-{{ environment }}-appgateway-pip"
  resource_group_name = var.resource_group_name
  location            = var.location
  allocation_method   = var.public_ip_allocation_method
  sku                 = var.public_ip_sku
  tags                = var.tags
  zones               = var.availability_zones

  lifecycle {
    create_before_destroy = true
  }
}

# Define local variables for naming conventions
locals {
  prefix                           = "{{ project_name }}-{{ environment }}"
  frontend_port_name_http          = "${local.prefix}-http"
  frontend_port_name_https         = "${local.prefix}-https"
  frontend_ip_configuration_name   = "${local.prefix}-fip"
  private_frontend_ip_configuration_name = "${local.prefix}-private-fip"
  backend_address_pool_name        = "${local.prefix}-backend-pool"
  backend_http_settings_name       = "${local.prefix}-backend-http"
  listener_name                    = "${local.prefix}-http-lstn"
  https_listener_name              = "${local.prefix}-https-lstn"
  request_routing_rule_name_http   = "${local.prefix}-http"
  request_routing_rule_name_https  = "${local.prefix}-https"
  redirect_configuration_name      = "${local.prefix}-redirect-cfg"
  autoscale_configuration_name     = "${local.prefix}-autoscale"
  gateway_config_name              = "${local.prefix}-gatewayconf"
  probe_name                       = "${local.prefix}-probe"
  ssl_cert_name                    = "${local.prefix}-sslcert"
  has_ssl_certificate              = var.azurerm_key_vault_certificate_secret_id != null
}

# Define the Application Gateway
resource "azurerm_application_gateway" "main" {
  name                = "${local.prefix}-appgw"
  resource_group_name = var.resource_group_name
  location            = var.location
  zones               = var.availability_zones
  enable_http2        = true

  ssl_policy {
    policy_name = "AppGwSslPolicy20220101S"
    policy_type = "Predefined"
  }

  identity {
    type         = "UserAssigned"
    identity_ids = [var.appgateway_kv_identity_id]
  }

  sku {
    name = "WAF_v2"
    tier = "WAF_v2"
  }

  gateway_ip_configuration {
    name      = local.gateway_config_name
    subnet_id = var.app_gateway_subnet_id
  }

  # Public IP configuration (required for WAF_v2, but will be blocked by NSG)
  frontend_ip_configuration {
    name                 = local.frontend_ip_configuration_name
    public_ip_address_id = azurerm_public_ip.app_gateway_ip.id
  }

  # Private IP configuration - primary access via VPN
  frontend_ip_configuration {
    name                          = local.private_frontend_ip_configuration_name
    subnet_id                     = var.app_gateway_subnet_id
    private_ip_address_allocation = "Static"
    private_ip_address            = "10.0.40.10"
  }

  frontend_port {
    name = local.frontend_port_name_http
    port = 80
  }

  dynamic "frontend_port" {
    for_each = local.has_ssl_certificate ? [1] : []
    content {
      name = local.frontend_port_name_https
      port = 443
    }
  }

  backend_address_pool {
    name = local.backend_address_pool_name
  }

  backend_http_settings {
    name                  = local.backend_http_settings_name
    cookie_based_affinity = "Disabled"
    port                  = 80
    protocol              = "Http"
    request_timeout       = 20
  }

  http_listener {
    name                            = local.listener_name
    frontend_ip_configuration_name = local.private_frontend_ip_configuration_name
    frontend_port_name             = local.frontend_port_name_http
    protocol                       = "Http"
  }

  request_routing_rule {
    name                       = local.request_routing_rule_name_http
    rule_type                  = "Basic"
    http_listener_name         = local.listener_name
    backend_address_pool_name  = local.backend_address_pool_name
    backend_http_settings_name = local.backend_http_settings_name
    priority                   = 20000
  }

  autoscale_configuration {
    min_capacity = 2
    max_capacity = 10
  }

  dynamic "ssl_certificate" {
    for_each = local.has_ssl_certificate ? [1] : []
    content {
      name                = local.ssl_cert_name
      key_vault_secret_id = var.azurerm_key_vault_certificate_secret_id
    }
  }

  waf_configuration {
    enabled          = true
    firewall_mode    = "Prevention"
    rule_set_type    = "OWASP"
    rule_set_version = "3.2"
  }

  lifecycle {
    ignore_changes = [
      backend_address_pool,
      backend_http_settings,
      http_listener,
      request_routing_rule,
      url_path_map,
      probe,
      tags
    ]
  }
}
