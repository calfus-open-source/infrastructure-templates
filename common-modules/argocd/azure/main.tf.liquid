locals {
  argocd_values_content = templatefile("./argocd-values.yaml", {
    hostname         = "argocd.${var.domain_name}"
    name             = "${var.name}"
    environment      = "${var.environment}"
    tls_secret_name  = var.tls_secret_name
  })
}

provider "kubernetes" {
  config_path    = "~/.kube/config"
  config_context = "${var.name}-${var.environment}-context"
}

provider "helm" {
  kubernetes {
    config_path = "~/.kube/config"
  }
}

resource "null_resource" "argocd_values" {
  triggers = {
    checksum = md5(local.argocd_values_content)
  }
}

resource "kubernetes_namespace" "ns-argocd" {
  metadata {
    annotations = {
      name = "${var.name}-${var.environment}-argocd"
    }
    name = "${var.name}-${var.environment}-argocd"
  }
}

resource "helm_release" "argocd" {
  name       = "argocd"
  chart      = "argo-cd"
  repository = "https://argoproj.github.io/argo-helm"
  version    = "{{ argocd_helm_version }}"
  namespace  = kubernetes_namespace.ns-argocd.metadata[0].name
  values     = [local.argocd_values_content]

  lifecycle {
    ignore_changes = [metadata]
  }
}

resource "kubernetes_secret" "argocd_ssh_secret" {
  metadata {
    name      = "${kubernetes_namespace.ns-argocd.metadata[0].name}-ssh-secret"
    namespace = kubernetes_namespace.ns-argocd.metadata[0].name
    labels = {
      "argocd.argoproj.io/secret-type" = "repository"
    }
  }

  data = {
    url           = var.gitops_repo_url_ssh
    type          = "git"
    sshPrivateKey = var.gitops_user_private_key
  }
}

output "argocd_namespace" {
  value = kubernetes_namespace.ns-argocd.metadata[0].name
}
