resource "aws_lb" "alb" {
  name               = "${var.name}-${var.environment}-alb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [var.default_security_group_id]
  subnets            = var.vpc_public_subnets
  enable_deletion_protection = false
}

resource "aws_route53_record" "alb_record" {
  zone_id = var.hosted_zone_id
  name    = "${var.environment}"
  records = [ aws_lb.alb.dns_name ]
  ttl = 300
  type    = "CNAME"
}

resource "aws_route53_record" "alb_cluster_record" {
  zone_id = var.hosted_zone_id
  name    = "${var.environment}-cluster"
  records = [ aws_lb.alb.dns_name ]
  ttl = 300
  type    = "CNAME"
}

resource "aws_acm_certificate" "domain_certificate" {
  domain_name       = "${var.environment}.${var.root_domain_name}"
  validation_method = "DNS"
  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_route53_record" "domain_cert_dns" {
  allow_overwrite = true
  name =  tolist(aws_acm_certificate.domain_certificate.domain_validation_options)[0].resource_record_name
  records = [tolist(aws_acm_certificate.domain_certificate.domain_validation_options)[0].resource_record_value]
  type = tolist(aws_acm_certificate.domain_certificate.domain_validation_options)[0].resource_record_type
  zone_id = var.hosted_zone_id
  ttl = 60
}

resource "aws_acm_certificate_validation" "domain_cert_validate" {
  certificate_arn = aws_acm_certificate.domain_certificate.arn
  validation_record_fqdns = [aws_route53_record.domain_cert_dns.fqdn]
}

resource "aws_acm_certificate" "cluster_certificate" {
  domain_name       = "${var.environment}-cluster.${var.root_domain_name}"
  validation_method = "DNS"
  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_route53_record" "cluster_cert_dns" {
  allow_overwrite = true
  name =  tolist(aws_acm_certificate.cluster_certificate.domain_validation_options)[0].resource_record_name
  records = [tolist(aws_acm_certificate.cluster_certificate.domain_validation_options)[0].resource_record_value]
  type = tolist(aws_acm_certificate.cluster_certificate.domain_validation_options)[0].resource_record_type
  zone_id = var.hosted_zone_id
  ttl = 60
}

resource "aws_acm_certificate_validation" "cluster_cert_validate" {
  certificate_arn = aws_acm_certificate.cluster_certificate.arn
  validation_record_fqdns = [aws_route53_record.cluster_cert_dns.fqdn]
}

resource "aws_lb_target_group" "alb_tg" {
  name     = "${var.name}-${var.environment}-tg"
  port     = 80
  protocol = "HTTP"
  vpc_id   = var.vpc_id
  health_check {
    interval            = 30
    path                = "/"
    port                = "traffic-port"
    protocol            = "HTTP"
    timeout             = 5
    healthy_threshold   = 5
    unhealthy_threshold = 3
    matcher             = "200,404"  # Specify the success HTTP response codes
  }  
}

resource "aws_lb_listener" "alb_listnener_https" {
  load_balancer_arn = aws_lb.alb.arn
  port              = "443"
  protocol          = "HTTPS"
  ssl_policy        = "ELBSecurityPolicy-2016-08"
  certificate_arn   = aws_acm_certificate.domain_certificate.arn

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.alb_tg.arn
  }
}

resource "aws_lb_listener_certificate" "alb_listener_certs" {
  count           = 2
  listener_arn    = aws_lb_listener.alb_listnener_https.arn
  certificate_arn = element([aws_acm_certificate.domain_certificate.arn, aws_acm_certificate.cluster_certificate.arn], count.index)
}

resource "aws_lb_listener" "alb_listnener_http" {
  load_balancer_arn = aws_lb.alb.arn
  port              = "80"
  protocol          = "HTTP"

  default_action {
    type = "redirect"

    redirect {
      port        = "443"
      protocol    = "HTTPS"
      status_code = "HTTP_301"
    }
  }
}

{% comment %}
resource "aws_lb_target_group_attachment" "alb_tg_attach_master" {
  count            = length(var.master_hosts)
  target_group_arn = aws_lb_target_group.alb_tg.arn
  target_id        = element(var.master_hosts[*], count.index)
  port             = 80
}

resource "aws_lb_target_group_attachment" "alb_tg_attach_worker" {
  count            = length(var.worker_hosts)
  target_group_arn = aws_lb_target_group.alb_tg.arn
  target_id        = element(var.worker_hosts[*], count.index)
  port             = 80
}
{% endcomment %}
